==========
Binomials
==========

Binomials are the product or difference of two unlike monomials. Let's see 
if there are any special tricks.

Simple Binomials Form
----------------------

Binomials have many forms. Were going to look at a few
examples. In the following table `v` stands for *variable*,
`n` stands for *number*, `c` for *coefficient*, and `e` for
*exponent*.

.. list-table:: Binomial Forms
    :widths: 4 2

    * - Variable alone
      - `+ v n` or `- v n`
    * - Variable with coefficient and exponent
      - `+ * c ^ v e n` or `- * c ^ v e n`


Multiplying Binomials
---------------------

Let's start with a simple example by calculating `* + x 3 - x 2`.

At first it doesn't look  like we can do anything with this. Reviewing 
our standard replacements, nothing matches this pattern of operators
and operands.

What we have is a Distribution problem.

If we substitute `A` for `- x 2` and `B` for `x` and `C` for `3`,
and rewrite the segment, we get `* + B C A` and after using 
the commutitive property we get `* A + B C` which becomes
`+ * A B * A C` after we distribute.

This is still going to be a lot of work with some very long statements,
so lets break this process down into some smaller processes:

.. list-table:: Multiplying A Binomial by a Constant
    :widths: 1 10 10
    :class: proof
    :name: binomial-by-constant
    
    * - |c1|
      - * m + * c ^ v e n
      - Given
    * - 
      - + * m * c ^ v e * m n
      - Distribution
    * - |c2|
      - + * * m c ^ v e * m n
      - Association
      
.. rst-class:: proof-notes

    ====  ===========================================================
    |c1|  In this case, `m`, `c`, `e` and `n` are numbers
    |c2|  `* m c` and `* m n` should be reducable further
    ====  ===========================================================
    
For example, `* 3 + * 2 ^ x 2 1` becomes `+ * * 3 2 ^ x 2 * 3 1` which
simplifies to `+ * 6 ^ x 2 3`, a binomial form.

.. list-table:: Multiplying a Binomial by a Monomial
    :widths: 1 10 10
    :class: proof
    :name: binomial-by-monomial
    
    * -
      - 
      -
..

    .. list-table:: Multipyling Binomials
        :widths: 1 10 10
        :class: proof
        :name: simple-binomial-multiplication

        * -
          - `* + x 3 - x 2` 
          - Given
        * -
          - `+ * - x 2 x * - x 2 3` 
          - Commutation and Distribution
        * - 
          - `+ - * x x * x 2 - * 3 x` :ci:`* 3 2` 
          - Commutation and Distribution (twice)
        * - 
          - `+ - ^ x 2 * x 2 - * 3 x` :cd:`6` 
          - Exponentation; Calculation
        * -
          - `+ + ^ x 2 - * x 2 + * 3 x -6` 
          - Subtraction; Subtraction
        * -
          - `+ + ^ x 2 * x -2 + * 3 x -6` 
          - Multiplying Opposites
        * -
          - `+ ^ x 2 + * -2 x + * 3 x -6` 
          - Association; Commutation
        * - 
          - `+ ^ x 2 + + * -2 x * 3 x -6` 
          - Association
        * - 
          - `+ ^ x 2 + * x + -2 3 -6` 
          - Distribution
        * - 
          - `+ ^ x 2 + * x 1 -6` 
          - Calculation
        * -
          - `+ ^ x 2 + x -6`
          - Identity *
        * -
          - `+ + ^ x 2 x -6`
          - Association
          
    Either of the final two forms are fine. I like the last one, myself.

    This can be a lot of work, and multiplying any two binomials
    is going to look a lot like this. Let's try adding coefficents.

    `+ * c ^ v e n * c ^ v e n`